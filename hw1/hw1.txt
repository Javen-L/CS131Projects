I used methods from the List library in place of the loops I originally used.

subset a b tests if each element in the first List is in the second List.

equal_set a b tests if the Lists are subsets of each other, because if they are 
subsets of each other, then their sets are equal.

set_union a b concatenates the two Lists, because the elements of a set do not 
have to be unique.

set_intersection a b returns a List that contains all the elements of a that 
are also in b.

set_diff a b returns a List that contains all the elements of a that are not 
in b. This is implemented in the same way as set_intersection except with a 
not in the condition.

computed_fixed_point is recursive to be able to compute infinite times. It 
computes the result of the input function and compares it to the input. If the 
result is the same as the input, then the input is returned. Otherwise, 
computed_fixed_point is called on the result.
computed_fixed_point infinitely recurses if there is no fixed point.

filter_reachable uses a helper method to implement its logic.
The recursive helper method takes in two parts as its arguments: an List of 
nonterminals to search and a List of rules to search. 
If the first part is empty, then an empty List is returned.
If not, the second part is filtered for rules using the first element of the 
first part.
Then, the recursive function is called on the elements in the List of the 
found rules and the rules not yet found to find more elements.
After this, the recursive function is called again on the List of nonterminals 
that have not been searched and the List of rules that have not been found.
All the found rules are then returned as the result of the function.
filter_reachable calls this method with the start expression and the List of 
rules, and returns a tuple of the start expression and the output.

I originally tried to implement the recursive method by removing repeats after 
calling recursively, but that caused infinite recursion.
